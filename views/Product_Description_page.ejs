<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="shortcut icon" type="image/x-icon" href="../assets/whitewolf-icon.ico">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/Product_Desc.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Outfit:wght@200;400;500&display=swap">
    <script src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <meta property="og:image" content='<%= item.imageLink[0] %>'>
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:width" content="65">
    <meta property="og:image:height" content="350">
    <meta property="og:title" content='<%= item.name %>'>
    <meta property="og:description" content="<%= item.description %>">
    
    <title><%= item.name %> - Whitewolf</title>
    <style>
      .card-wrapper{
    background-color: #000;
    width: 90%;
}

footer .social a{
  color: #fff;
}

.product-grid{
        padding: 1rem;
        width: 100%;
        overflow-x: scroll;
        scrollbar-width: 1px;
    display: flex;
    flex-wrap: nowrap;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    }

.product-card {
        width: 24% !important;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    background-color: #fff;
    color: #000;
    margin: 5px;
    padding: 2vh;
    color: #fff;
    border-radius: 10px;
    transition: transform 0.2s;
    height: max-content;
    }

    .product-grid .product-title{
        font-size: 2.5vh !important;
    }

    .product-image {
        width: 100%;
    height: 30vh;
    object-fit: cover;
    transition: transform 1s ease-in-out;
    display: block;
    margin-left: auto;
    margin-right: auto;
    overflow: hidden;
    border-radius: 10px !important;
    }

    .product-image:hover{
            transition: 1s ease-in-out;
    }


@media screen and (max-width: 576px) {
    .product-card {
        min-width: 45% !important;
    }

    .product-grid .product-image{
        width: 100%;
        height: 20vh;
    }

    .product-title {
        font-weight: 600;
    }

    .product-description {
        font-weight: 400;
        font-size: 2vh;
    } 
}

    </style>
</head>
<body>
  <div id="alertContainer"></div>
  <style>
    .alert {
        position: fixed;
        top: -100%;
        right: 1rem;
        z-index: 2;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        text-transform: capitalize;
        border-radius: 0.25rem;
        transition: 0.3s ease-in-out;
        animation: slideIn 0.5s forwards;
    }

    @keyframes slideIn {
        0% {
            top: -100%;
        }
        100% {
            top: 1rem;
        }
    }

    .alert.success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert.danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
</style>
<script>
    function showAlert(message, type) {
        const alertContainer = document.getElementById("alertContainer");

        // Create alert element
        const alert = document.createElement("div");
        alert.className = `alert ${type}`;
        alert.innerHTML = `${message}<span class="close" onclick="closeAlert(this)"> &#10060;</span>`;

        // Append alert to container
        alertContainer.appendChild(alert);

        // Set timeout to remove the alert after 5 seconds
        setTimeout(() => {
            closeAlert(alert.querySelector(".close"));
        }, 4000);
    }

    function closeAlert(closeButton) {
        const alert = closeButton.parentElement;
        alert.style.animation = "slideOut 0.5s forwards";

        // Remove the element from the DOM after the animation completes
        alert.addEventListener("animationend", function () {
            alert.remove();
        });
    }
</script>

    <div class="promo-strip">
        Get 25% Off on Every Purchase
      </div>
    <nav class="navbar navbar-expand-lg navbar-dark p-2" style="width: 100%; background-color: #000;">
        <div class="container-fluid">

          <div class="col-md-4 text-left" style="width: 30%;">
            <a class="navbar-brand" href="/">
              <img src="/assets/ww side name logo.png_white@3x.png"style="width:auto; height: 5vh;" alt="Logo">
            </a>
          </div>

          <div class="col-md-4 d-flex justify-content-center" style="width: 30%;">
            <ul class="navbar-nav">
              <li class="nav-item">
                <form class="form-inline d-none d-md-inline">
                  <div class="input-group" style="width: 30vw;">
                     <input type="text" style="border-radius: 1rem 0 0 1rem;border: none;" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="search-icon">
                     <div class="input-group-append">
                        <span class="input-group-text" style="border-radius: 0 1rem 1rem 0; background-color: #fff;" id="search-icon">
                           <iconify-icon icon="material-symbols:search"></iconify-icon>
                        </span>
                     </div>
                  </div>
               </form>               
              </li>
            </ul>
          </div>

          <div class="custom-nav d-flex justify-content-end" style="width: 30%; font-size: 1rem;">
            <% if (content.isLoggedIn === true) { %>
                <a class="nav-link cartButtom d-flex align-items-center" style="color: #fff; font-size: 1.2rem;" onclick="openCart()">
                <iconify-icon icon="mdi:cart" style="font-size: 2rem;"></iconify-icon>
                <span style="margin-left: 5px;"></span>
                </a>
                <a class="nav-link d-flex align-items-center" href="/profile" style="color: #fff; font-size: 1.2rem;">
                <iconify-icon icon="gg:profile" style="font-size: 2rem;"></iconify-icon>
                <span style="margin-left: 5px;"></span>
                </a>
              <% } else { %>
                <a class="nav-link cartButtom d-flex align-items-center" style="color: #fff; font-size: 1.2rem;" onclick="openCart()">
                  <iconify-icon icon="mdi:cart" style="font-size: 2rem;"></iconify-icon>
                   <span style="margin-right: -30px;"></span>
                </a>
                <a class="nav-link d-flex align-items-center" href="/login" style="color: #fff; font-size: 1.2rem;">
                  <iconify-icon icon="material-symbols:login-sharp" style="font-size: 2rem;display:none"></iconify-icon>
                <span style="margin-left: 0px;"></span>
                </a>
              <% } %>
           </div>
        </div>
      </nav> 
    <%- include('partials/cart') %>

    <div class="card-wrapper mt-4" style="width: 100%;height: max-content;">

        <div class="cardio" style="width: 100%;grid-column-gap: 5vh;height: 100%;">
              <div class="product-imgs" style="align-self: start;">
                <div class="additional-images">
                  <% item.imageLink.forEach((image, index) => { %>
                      <div class="additional-image" onclick="loadImage('<%= image %>')" style="background-image: url('<%= image %>');">
                          
                          
                      </div>
                  <% }); %>
              </div>
                <div class="main-image" id="mainImageContainer">
                  <img id="mainProductImage" src='<%= item.imageLink[0] %>' alt="Main Product Image">
                </div>
            
              </div>      

            <div class="product-content" style="align-self: start;">
                <h2 class="product-title" style="color: #fff;"><%= item.name %></h2>
                <div class = "product-rating">
                    <iconify-icon icon="noto:star"></iconify-icon>
                    <span>4.7 | (21 Reviews)</span>
                </div>

               <div class="butns">
                <div>
                  <div class="product-price">
                    <p class="discount-percentage">
                        <% 
                            const discountPercentage = ((item.originalPrice - item.offeredPrice) / item.originalPrice) * 100;
                        %>
                        <span>-<%= discountPercentage.toFixed(0) %>%  </span> 
                        <p class="new-price"><span>&#8377;<%= item.offeredPrice %></span></p>
    
                        </p>
                    </div>
    
                    <p class="last-price">M.R.P. : <span>&#8377;<%= item.originalPrice%></span></p>
                    <p class="tax">Inclusive of all taxes</p>
                 </div>
                <div class="quantity-container" style="display: none;">
                  <button id="minus-btn" class='decrease<%= item.itemId %>desc'>-</button>
                  <input type="button" id="quantity-input" class='itemQuantity<%= item.itemId %>desc' value="0">
                  <button id="plus-btn" class='increase<%= item.itemId %>desc'>+</button>
                </div>
              
               </div>

                <div class="purchase-info">
                    <button type="button" class="btn addCartButton">Add to Cart</button>
                </div>

                <div class="product-detail">
                    <p><%= item.description %></p>
                </div>

                <div class="social-links d-flex flex-row align-items-center">
                  <p style="font-size:2.7vh;font-weight: 300;">Share This Product : </p>
                  <!-- Replace 'your_product_url' with the actual URL of your product -->
                  <a href="https://www.facebook.com/sharer/sharer.php?u%= item.name" target="_blank">
                      <iconify-icon icon="bi:facebook"></iconify-icon>
                  </a>
                  <!-- Replace 'your_product_url' and 'Your%20Product%20Description' with the actual URL and description of your product -->
                  <a href="https://twitter.com/intent/tweet?url=your_product_url&text=Your%20Product%20Description" target="_blank">
                      <iconify-icon icon="pajamas:twitter"></iconify-icon>
                  </a>
                  <!-- Replace 'your_product_url' with the actual URL of your product -->
                  <a href="https://www.instagram.com/?url=your_product_url" target="_blank">
                      <iconify-icon icon="lucide:instagram"></iconify-icon>
                  </a>
                  <!-- Replace 'your_product_url' and 'Your%20Product%20Description' with the actual URL and description of your product -->
                  <a href="https://api.whatsapp.com/send?text=Your%20Product%20Description%20- %20your_product_url" target="_blank">
                      <iconify-icon icon="ic:sharp-whatsapp"></iconify-icon>
                  </a>
              </div>
              
            </div>

        </div>
    </div>

    <script>
      function loadImage(image) {
          var mainProductImage = document.getElementById('mainProductImage');
          
          // Add a class to initiate the slide-out effect
          mainProductImage.classList.add('slide-out');
  
          // Wait for the transition to complete before changing the image source
          setTimeout(function() {
              mainProductImage.src = image;
  
              // Remove the class to initiate the slide-in effect
              mainProductImage.classList.remove('slide-out');
          }, 300); // Adjust the time (in milliseconds) based on the transition duration
      }
  </script>

    <div class="faq-section mt-5 mb-5">
        <div class="faq-question" onclick="toggleFAQ(this)">
            <span>FAQ's</span>
            <span class="icon" >&#43;</span>
        </div>
        <div class="faq-answer">
            <p>WhiteWolf's Beard Care is crafted with premium ingredients for a soft, well-groomed beard.</p>
        </div>

        <div class="faq-question" onclick="toggleFAQ(this)">
            <span>Ingredients?</span>
            <span class="icon">&#43;</span>
        </div>
        <div class="faq-answer">
            <p>WhiteWolf's Hair Care delivers salon-quality results for various hair types and styles.</p>
        </div>

        <div class="faq-question" onclick="toggleFAQ(this)">
            <span>How To Use?</span>
            <span class="icon">&#43;</span>
        </div>
        <div class="faq-answer">
            <p>WhiteWolf's Skin Care enhances skin vitality, offering a natural, glowing complexion.</p>
        </div>
    </div>

    <div class="parent-container container mt-5 mb-5">
      <div class="left-container">
        <div>
          <h2 class="averageRating">4.0</h2>
        </div>
        <div>
          <p class="totalStars">
            <iconify-icon icon="material-symbols:star"></iconify-icon>
            <iconify-icon icon="material-symbols:star"></iconify-icon>
            <iconify-icon icon="material-symbols:star"></iconify-icon>
            <iconify-icon icon="material-symbols:star"></iconify-icon>
          </p>
        </div>
        <div>
          <h4 class="totalReviews">(0 Verified Reviews)</h4>
        </div>
      </div>
      <div class="right-container">
        <canvas id="ratingsChart"></canvas>
      </div>
    </div>

    <div class="review-container container">

      <select id="reviewFilter" onchange="filterReviews()">
          <option value="recent">Most Recent</option>
          <option value="positive">Positive First</option>
          <option value="negative">Negative First</option>
      </select>
  
      <div class="review-section" id="positiveReviews">
          
      </div>
  
      <script>
          let reviews = [];
          const ratingCounts = [1, 1, 1, 1, 1];

          document.addEventListener('DOMContentLoaded', async () => {
              await axios.get(`/products/<%= item.itemId %>/allReviews`)
                  .then(response => {
                      reviews = response.data.review;
                      console.log(reviews)

                      let totalRating = 0;
                      for (const review of reviews) {
                          totalRating += review.rating;
                          ratingCounts[(review.rating - 1)]++;
                      }

                      const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;

                      // Display total stars
                      const totalStarsContainer = document.querySelector(".totalStars");
                      totalStarsContainer.innerHTML = ""; // Clear previous stars

                      for (let i = 0; i < averageRating; i++) {
                          const starIcon = document.createElement("iconify-icon");
                          starIcon.setAttribute("icon","material-symbols:star");
                          totalStarsContainer.append(starIcon);
                      }

                      drawReviewChart()
                      document.querySelector(".totalReviews").textContent = `(${reviews.length} Verified Reviews)`
                      document.querySelector(".averageRating").textContent = averageRating
                      filterReviews(); // Initial rendering
                  })
                  .catch(err => showAlert("Something went wrong loading reviews", "danger"));
          });
          function drawReviewChart() {
    // Assuming ratingCounts is an array containing the counts of each rating
    const maxRatingCount = Math.max(...ratingCounts);

    var ctx = document.getElementById('ratingsChart').getContext('2d');
    var ratingsChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['1 Star', '2 Stars', '3 Stars', '4 Stars', '5 Stars'],
            datasets: [{
                label: '',
                data: ratingCounts,
                borderWidth: 2,
                barThickness: 10,
                backgroundColor: [
                    '#FF5733',
                    '#FFD933',
                    '#33FF57',
                    '#33B5FF',
                    '#8333FF'
                ],
                borderColor: [
                    '#FF5733',
                    '#FFD933',
                    '#33FF57',
                    '#33B5FF',
                    '#8333FF'
                ],
                borderRadius: 5, // Set the border radius for every corner
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            plugins: {
                legend: {
                    display: false,
                },
                title: {
                    display: false,
                    text: 'Chart.js Horizontal Bar Chart'
                }
            },
            scales: {
                x: {
                    display: false,
                    beginAtZero: true,
                    max: maxRatingCount + 3
                },
                y: {
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
}

  
          function filterReviews() {
              const filterOption = document.getElementById("reviewFilter").value;
              const positiveReviewsContainer = document.getElementById("positiveReviews");
  
              // Clear existing reviews
              positiveReviewsContainer.innerHTML = "";
  
              // Filter reviews based on the selected option
              const filteredReviews = reviews.filter(review => {
                  if (filterOption === "positive") {
                      return review.rating > 0;
                  } else if (filterOption === "negative") {
                      return review.rating <= 0;
                  } else {
                      return true; // Show all for "recent" option
                  }
              });
  
              // Display filtered reviews
              filteredReviews.forEach(review => {
                  const reviewItem = document.createElement("div");
                  reviewItem.classList.add("review-item");
                  reviewItem.innerHTML = `
                      <div class="review-name">${review.email}</div>
                      <div class="review-date">${formatDate(review.dateAdded)}</div>
                      <div class="review-stars">${review.rating}</div>
                      <div class="review-title">${review.title}</div>
                      <div class="review-desc">${review.detail}</div>
                  `;
                  positiveReviewsContainer.appendChild(reviewItem);
              });
          }
  
          function formatDate(date) {
              const options = { year: 'numeric', month: 'long', day: 'numeric' };
              return new Date(date).toLocaleDateString(undefined, options);
          }
      </script>
  </div>
  

  <h2 class="people m-2 mt-4" style="font-size:5vh;">People Also Bought</h2>
  <div id="productGrid" class="row mb-3 product-grid container onmousedown="startScroll(event)" onmouseup="stopScroll()" ontouchstart="startScroll(event)" ontouchend="stopScroll()">
  </div>
  <%- include('partials/footer') %>
  
 <%- include('partials/loader') %>

    <script>
        document.querySelector(`.addCartButton`).addEventListener('click', async () => {
            event.preventDefault();
            try {
                const Id = '<%= item.itemId %>';
                const response = await axios.post('/addItem', { itemId: Id});
                if (response.status === 200) {
                  console.log(response.data.message);
                      showAlert('item added to cart','success')
                      openCart()
                      let container = document.querySelector('.quantity-container')
                      container.style.display = 'block'
                      let value = document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value;
                      value = parseInt(value, 10);  // Parse the value as an integer
                      value = value + 1;
                      document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = value;
                } else {
                    console.error('Error adding item to cart:', response.data.message);

                }
            } catch (err) {
              window.location.href = "/login"
            }
        });
        document.addEventListener('DOMContentLoaded', async () => {
          const response = await axios.get('/getprofile');
          const userProfile = response.data.userProfile;
          const itemId = '<%= item.itemId %>';
          const cartItem = userProfile.cart.find(item => item.itemId === itemId);
          if (cartItem) {
            document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = cartItem.quantity
            document.querySelector('.quantity-container').style.display = 'block'
          } 
          document.querySelector(`.decrease<%= item.itemId %>desc`).addEventListener('click', async () => {
              await axios.post('/decreaseItem', { itemId: '<%= item.itemId %>' })
              .then(response => {
                  quantity = response.data.newQuantity;
                  if (quantity === -1){
                    document.querySelector('.quantity-container').style.display = 'none'
                      showAlert("Item removed from cart","success")
                  } else {
                      document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = quantity;
                      showAlert("Item quantity decreased","success")
                  }
              })
              .catch(err => alert("error " + err))
          })
          document.querySelector('.increase<%= item.itemId %>desc').addEventListener('click', async () => {
              console.log("triggered")
              await axios.post('/increaseItem', { itemId: '<%= item.itemId %>' })
              .then(response => {
                console.log('quantity increased')
                  document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = response.data.newQuantity;
                  showAlert("Item quantity increased","success")
              })
              .catch(err => alert("error " + err))
          })
        });

    </script>

<script>
  let products = [];

  document.addEventListener('DOMContentLoaded', async () => {
    try {
        const response = await fetchProducts('/api/products');
        products = response;
        renderProducts('all');
    } catch (error) {
        showAlert("error while fetching the products","danger")
    }
  });

  async function fetchProducts(apiEndpoint) {
    const response = await axios.get(apiEndpoint);
    return response.data;
  }

  function attachAddToCartListeners(products) {
    products.forEach(product => {
          const addButton = document.querySelector(`.add${product.itemId}`);
          addButton.addEventListener('click', async (event) => {
              event.preventDefault();
              try {
                const response = await addToCart('/addItem', { itemId: product.itemId });
                if (response.status === 200) {
                      console.log(response.data.message);
                      showAlert('item added to cart','success')
                      openCart()
                      // Optionally, update the UI to reflect the item being added to the cart
                } else {
                      console.error('Error adding item to cart:', response.data.message);
                      // Optionally, handle the error and update the UI accordingly
                }
              } catch (err) {
                if (err.response.status === 400){
                    showAlert("Item already in cart","success")
                    openCart()
                } else {
                    window.location.href = "/login"
                }
              }
          });
    });
  }
  async function addToCart(apiEndpoint, data) {
    return await axios.post(apiEndpoint, data);
  }

  function renderProducts(categoryFilter) {
    const productGrid = document.getElementById('productGrid');
    productGrid.innerHTML = '';

    const filteredProducts = categoryFilter === 'all' ? products : products.filter(product => product.category === categoryFilter);

    filteredProducts.forEach(product => {
          const productCard = createProductCard(product);
          productGrid.appendChild(productCard);
    });

    attachAddToCartListeners(filteredProducts);
  }
  function createProductCard(product) {
  const productCard = document.createElement('div');
  productCard.className = 'col-md-4 product-card product';

  var words = product.description.split(" ");
          product.description = words.slice(0, 8).join(" ");
          if (words.length > 8) {
              product.description += " ...";
          }

          words = product.name.split(" ");
          product.name = words.slice(0, 7).join(" ");
          if (words.length > 7) {
              product.name += " ...";
          }

  productCard.innerHTML = `
  <a href="/search/${product.itemId}" >
    <div class="product-image-container">
          <img class="product-image" src="${product.imageLink[0]}" alt="${product.name}">
          <img class="product-image hover-image" src="${product.imageLink[1] || product.imageLink[0]}" alt="${product.name}" style="display:none">
    </div>
    <div class="product-details">
          <div class="category-badge text-white corner-round p-1" style="display:none;">${product.category}</div>
          <div class="product-title"><a href="Product_Description.html" style="text-decoration:none;color:#000">${product.name}</a></div>
          <div class="product-description">${product.description}</div>
          <div class="mb-1">
              <div class="d-flex justify-content-between product-price-discount">
                <div class="product-price">&#8377; ${product.offeredPrice}</div>
                <div class="original-price text-secondary text-decoration-line-through">&#8377;${product.originalPrice || ''}</div>
                <div class="product-discount text-success">${((product.originalPrice - product.offeredPrice) / product.originalPrice * 100).toFixed(0)}% Off</div>
              </div>
          </div>
          <button onclick="showNotification()" class="add-to-cart-btn add${product.itemId}" id="liveToastBtn"><i class="fas fa-cart"></i> Add to Cart</button>
    </div>
  </a>
  `;

  const productImageContainer = productCard.querySelector('.product-image-container');
  const mainImage = productImageContainer.querySelector('.product-image');
  const hoverImage = productImageContainer.querySelector('.hover-image');

  productImageContainer.addEventListener('mouseenter', function () {
    mainImage.style.display = 'none';
    hoverImage.style.display = 'block';
  });

  productImageContainer.addEventListener('mouseleave', function () {
    mainImage.style.display = 'block';
    hoverImage.style.display = 'none';
  });

  return productCard;
  }

  // Example usage
  const container = document.getElementById('productContainer'); // Replace with the actual container element ID
  products.forEach(product => {
  const productCard = createProductCard(product);
  container.appendChild(productCard);
  });
</script>

<script>
    function toggleFAQ(question) {
        const isActive = question.classList.contains('active');
        const faqQuestions = document.querySelectorAll('.faq-question');

        faqQuestions.forEach((faqQuestion) => {
            faqQuestion.classList.remove('active');
            const answer = faqQuestion.nextElementSibling;
            answer.style.maxHeight = '0';
            const icon = faqQuestion.querySelector('.icon');
            icon.innerHTML = '&#43;';
        });

        if (!isActive) {
            question.classList.add('active');
            const answer = question.nextElementSibling;
            answer.style.maxHeight = answer.scrollHeight + 'px';
            const icon = question.querySelector('.icon');
            icon.innerHTML = '&#x292B;';
        }
    }
</script>

</body>
</html>