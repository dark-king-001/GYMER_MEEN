<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/Product_Desc.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Outfit:wght@200;400;500&display=swap">
    <link rel="shortcut icon" type="image/x-icon" href="../assets/WhiteIcon.png">
    <script src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>Whitewolf - <%= item.name %></title>
    <style>
      .card-wrapper{
    background-color: #000;
    width: 90%;
}
    </style>
</head>
<body>
  <div id="alertContainer"></div>
    <style>
      .alert {
          position: fixed;
          top: 1rem;
          right: 1rem;
          z-index: 2;
          padding: 0.75rem 1.25rem;
          margin-bottom: 1rem;
          border: 1px solid transparent;
          border-radius: 0.25rem;
          transition: 0.3s ease-in-out;
        }
   
        .alert.success {
          color: #155724;
          background-color: #d4edda;
          border-color: #c3e6cb;
        }
        .alert.danger {
          color: #721c24;
          background-color: #f8d7da;
          border-color: #f5c6cb;
        }
      </style>
      <script>
        function showAlert(message, type) {
          const alertContainer = document.getElementById("alertContainer");
      
          // Create alert element
          const alert = document.createElement("div");
          alert.className = `alert ${type}`;
          alert.innerHTML = `${message}<span class="close" onclick="closeAlert(this)">×</span>`;
      
          // Append alert to container
          alertContainer.appendChild(alert);
      
          // Set timeout to remove the alert after 5 seconds
          setTimeout(() => {
            closeAlert(alert.querySelector(".close"));
          }, 4000);
        }
      
        function closeAlert(closeButton) {
          const alert = closeButton.parentElement;
          alert.style.display = "none";
        }
      </script>
    <div class="promo-strip">
        Get 25% Off on Every Purchase
      </div>
    <nav class="navbar navbar-expand-lg navbar-dark p-2" style="width: 100%; background-color: #000;">
        <div class="container-fluid">

          <div class="col-md-4 text-left" style="width: 30%;">
            <a class="navbar-brand" href="/">
              <img src="/assets/newlogo.png"style="width: 7vh; height: auto;" alt="Logo">
            </a>
          </div>

          <div class="col-md-4 d-flex justify-content-center" style="width: 30%;">
            <ul class="navbar-nav">
              <li class="nav-item">
                <form class="form-inline d-none d-md-inline">
                  <div class="input-group" style="width: 30vw;">
                     <input type="text" style="border-radius: 1rem 0 0 1rem;border: none;" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="search-icon">
                     <div class="input-group-append">
                        <span class="input-group-text" style="border-radius: 0 1rem 1rem 0; background-color: #fff;" id="search-icon">
                           <iconify-icon icon="material-symbols:search"></iconify-icon>
                        </span>
                     </div>
                  </div>
               </form>               
              </li>
            </ul>
          </div>

          <div class="custom-nav d-flex justify-content-end" style="width: 30%; font-size: 1rem;">
            <% if (content.isLoggedIn === true) { %>
                <a class="nav-link cartButtom d-flex align-items-center" style="color: #fff; font-size: 1.2rem;" onclick="openCart()">
                <iconify-icon icon="bxs:cart-add" style="font-size: 2rem;"></iconify-icon>
                <span style="margin-left: 5px;"></span>
                </a>
                <a class="nav-link d-flex align-items-center" href="/profile" style="color: #fff; font-size: 1.2rem;">
                <iconify-icon icon="gg:profile" style="font-size: 2rem;"></iconify-icon>
                <span style="margin-left: 5px;"></span>
                </a>
              <% } else { %>
                <a class="nav-link cartButtom d-flex align-items-center" style="color: #fff; font-size: 1.2rem;" onclick="openCart()">
                   <iconify-icon icon="bxs:cart-add" style="font-size: 2rem;"></iconify-icon>
                   <span style="margin-right: -30px;"></span>
                </a>
                <a class="nav-link d-flex align-items-center" href="/login" style="color: #fff; font-size: 1.2rem;">
                  <iconify-icon icon="material-symbols:login-sharp" style="font-size: 2rem;display:none"></iconify-icon>
                <span style="margin-left: 0px;"></span>
                </a>
              <% } %>
           </div>
        </div>
      </nav> 
    <%- include('partials/cart') %>

    <div class="card-wrapper mt-3" style="width: 100%;height: max-content;">

        <div class="cardio" style="width: 100%;grid-column-gap: 10vh;height: 100%;">
            <div class="product-imgs" style="align-self: start;">
              <div class="main-image" id="mainImageContainer">
                <img id="mainProductImage" src='<%= item.imageLink[0] %>' alt="Main Product Image">
            </div>
            <div class="additional-images">
              <% item.imageLink.forEach((image, index) => { %>
                  <div class="additional-image" onclick="loadImage('<%= image %>')" style="background-image: url('<%= image %>');">
                      <!-- You can optionally include an img tag within the div for accessibility -->
                      <!-- <img src="<%= image %>" alt="shoe image"> -->
                  </div>
              <% }); %>
          </div>
          
          <script>
            function loadImage(image) {
                var mainProductImage = document.getElementById('mainProductImage');
                
                // Add a class to initiate the slide-out effect
                mainProductImage.classList.add('slide-out');
        
                // Wait for the transition to complete before changing the image source
                setTimeout(function() {
                    mainProductImage.src = image;
        
                    // Remove the class to initiate the slide-in effect
                    mainProductImage.classList.remove('slide-out');
                }, 300); // Adjust the time (in milliseconds) based on the transition duration
            }
        </script>
            </div>      

            <div class="product-content" style="align-self: start;">
                <h2 class="product-title" style="color: #fff;"><%= item.name %></h2>
                <div class = "product-rating">
                    <iconify-icon icon="noto:star"></iconify-icon>
                    <span>4.7 | (21 Reviews)</span>
                </div>

               <div class="butns">
                <div>
                  <div class="product-price">
                    <p class="discount-percentage">
                        <% 
                            const discountPercentage = ((item.originalPrice - item.offeredPrice) / item.originalPrice) * 100;
                        %>
                        <span>-<%= discountPercentage.toFixed(0) %>%  </span> 
                        <p class="new-price"><span>&#8377;<%= item.offeredPrice %></span></p>
    
                        </p>
                    </div>
    
                    <p class="last-price">M.R.P. : <span>&#8377;<%= item.originalPrice%></span></p>
                    <p class="tax">Inclusive of all taxes</p>
                 </div>
                <div class="quantity-container" style="display: none;">
                  <button id="minus-btn" class='decrease<%= item.itemId %>desc'>-</button>
                  <input type="button" id="quantity-input" class='itemQuantity<%= item.itemId %>desc' value="0">
                  <button id="plus-btn" class='increase<%= item.itemId %>desc'>+</button>
                </div>
              
               </div>

                <div class="purchase-info">
                    <button type="button" class="btn addCartButton">Add to Cart</button>
                </div>

                <div class="product-detail">
                    <p><%= item.description %></p>
                </div>

                <div class="social-links d-flex flex-row align-items-center">
                      <p>Share This Product : </p>
                      <a href = "#">
                        <iconify-icon icon="bi:facebook"></iconify-icon>
                      </a>
                      <a href = "#">
                        <iconify-icon icon="pajamas:twitter"></iconify-icon>
                      </a>
                      <a href = "#">
                        <iconify-icon icon="lucide:instagram"></iconify-icon>
                      </a>
                      <a href = "#">
                        <iconify-icon icon="ic:sharp-whatsapp"></iconify-icon>
                      </a>
                  </div>
            </div>

        </div>
    </div>

    <div class="faq-section mt-5 mb-5">
        <div class="faq-question" onclick="toggleFAQ(this)">
            <span>FAQ</span>
            <span class="icon">+</span>
        </div>
        <div class="faq-answer">
            <p>The product comes with a one-year warranty.</p>
        </div>

        <div class="faq-question" onclick="toggleFAQ(this)">
            <span>How to use</span>
            <span class="icon">+</span>
        </div>
        <div class="faq-answer">
            <p>You can initiate a return through our online portal.</p>
        </div>

        <div class="faq-question" onclick="toggleFAQ(this)">
            <span>Key Ingredients</span>
            <span class="icon">+</span>
        </div>
        <div class="faq-answer">
            <p>A: Currently, the product is available in one color option.</p>
        </div>
    </div>

    <div class="parent-container container mt-5 mb-5">
      <div class="left-container">
        <div>
          <h2 class="averageRating">4.0</h2>
        </div>
        <div>
          <p class="totalStars">
            <iconify-icon icon="material-symbols:star"></iconify-icon>
            <iconify-icon icon="material-symbols:star"></iconify-icon>
            <iconify-icon icon="material-symbols:star"></iconify-icon>
            <iconify-icon icon="material-symbols:star"></iconify-icon>
          </p>
        </div>
        <div>
          <h4 class="totalReviews">(0 Verified Reviews)</h4>
        </div>
      </div>
      <div class="right-container">
        <canvas id="ratingsChart"></canvas>
      </div>
    </div>

    <div class="review-container container">

      <select id="reviewFilter" onchange="filterReviews()">
          <option value="recent">Most Recent</option>
          <option value="positive">Positive First</option>
          <option value="negative">Negative First</option>
      </select>
  
      <div class="review-section" id="positiveReviews">
          <!-- Display reviews dynamically using JavaScript -->
      </div>
  
      <script>
          let reviews = [];
          const ratingCounts = [1, 1, 1, 1, 1];

          document.addEventListener('DOMContentLoaded', async () => {
              await axios.get(`/products/<%= item.itemId %>/allReviews`)
                  .then(response => {
                      reviews = response.data.review;
                      console.log(reviews)

                      let totalRating = 0;
                      for (const review of reviews) {
                          totalRating += review.rating;
                          ratingCounts[(review.rating - 1)]++;
                      }

                      const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;

                      // Display total stars
                      const totalStarsContainer = document.querySelector(".totalStars");
                      totalStarsContainer.innerHTML = ""; // Clear previous stars

                      for (let i = 0; i < averageRating; i++) {
                          const starIcon = document.createElement("iconify-icon");
                          starIcon.setAttribute("icon","material-symbols:star");
                          totalStarsContainer.append(starIcon);
                      }

                      drawReviewChart()
                      document.querySelector(".totalReviews").textContent = `(${reviews.length} Verified Reviews)`
                      document.querySelector(".averageRating").textContent = averageRating
                      filterReviews(); // Initial rendering
                  })
                  .catch(err => showAlert("Something went wrong loading reviews", "danger"));
          });
          function drawReviewChart() {
            // Assuming ratingCounts is an array containing the counts of each rating
            const maxRatingCount = Math.max(...ratingCounts);

            var ctx = document.getElementById('ratingsChart').getContext('2d');
            var ratingsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['1 Star', '2 Stars', '3 Stars', '4 Stars', '5 Stars'],
                    datasets: [{
                        label: '',
                        data: ratingCounts,
                        backgroundColor: [
                            '#FF5733',
                            '#FFD933',
                            '#33FF57',
                            '#33B5FF',
                            '#8333FF'
                        ],
                        borderColor: [
                            '#FF5733',
                            '#FFD933',
                            '#33FF57',
                            '#33B5FF',
                            '#8333FF'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            display: false,
                            beginAtZero: true,
                            max: maxRatingCount + 3  // Adjusted to fit the highest count and add some buffer
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

  
          function filterReviews() {
              const filterOption = document.getElementById("reviewFilter").value;
              const positiveReviewsContainer = document.getElementById("positiveReviews");
  
              // Clear existing reviews
              positiveReviewsContainer.innerHTML = "";
  
              // Filter reviews based on the selected option
              const filteredReviews = reviews.filter(review => {
                  if (filterOption === "positive") {
                      return review.rating > 0;
                  } else if (filterOption === "negative") {
                      return review.rating <= 0;
                  } else {
                      return true; // Show all for "recent" option
                  }
              });
  
              // Display filtered reviews
              filteredReviews.forEach(review => {
                  const reviewItem = document.createElement("div");
                  reviewItem.classList.add("review-item");
                  reviewItem.innerHTML = `
                      <div class="review-name">${review.email}</div>
                      <div class="review-date">${formatDate(review.dateAdded)}</div>
                      <div class="review-stars">${review.rating}</div>
                      <div class="review-title">${review.title}</div>
                      <div class="review-desc">${review.detail}</div>
                  `;
                  positiveReviewsContainer.appendChild(reviewItem);
              });
          }
  
          function formatDate(date) {
              const options = { year: 'numeric', month: 'long', day: 'numeric' };
              return new Date(date).toLocaleDateString(undefined, options);
          }
      </script>
  </div>
  

  <h2 class="people m-2 mt-4">People Also Bought</h2>
  <div id="productGrid" class="row mb-3 product-grid container onmousedown="startScroll(event)" onmouseup="stopScroll()" ontouchstart="startScroll(event)" ontouchend="stopScroll()">
  </div>

  <footer class="container-fluid mt-5 d-flex flex-column container text-white p-3 footer"style="background-color: #000;">
    <div class=" text-left mt-3 p-5" style="background-color: #070707;">
       <div class="row">
          <div class="col-md-3">
             <img src="../assets/newlogo.png" alt="Logo" class="img-fluid mb-3" style="width: auto;height: 10vh;">
          </div>
          <div class="col-md-6 d-flex footer-menu">
             <div class="col-md-6 mr-3 list-unstyled">
                <li><a href="#" class="text-white">About us</a></li>
                <li><a href="#" class="text-white">FAQ</a></li>
                <li><a href="#" class="text-white">Shipping and Payment</a></li>
                <li><a href="#" class="text-white">Partners</a></li>
                <li><a href="#" class="text-white">Blog</a></li>
                <li><a href="#" class="text-white">Contact Us</a></li>
             </div>
             <div class="col-md-6 ml-3 list-unstyled">
                <li><a href="#" class="text-white">Customer Reviews</a></li>
                <li><a href="#" class="text-white">Hair Care</a></li>
                <li><a href="#" class="text-white">Skin Care</a></li>
                <li><a href="#" class="text-white">Face Care</a></li>
             </div>
          </div>
          <div class="col-md-3 d-flex flex-column align-items-end">
             <button class="btn btn-light mb-2">Shop Now</button>
             <p>+(123) 123-99-999</p>
             <p>info@WhiteWolf.com</p>
          </div>
       </div>
       <div class="row mt-5">
          <div class="col-md-3 social">
             <ul class="list-unstyled">
                <a href="#" class="mr-2"><iconify-icon icon="mdi:instagram"></iconify-icon></i></a>
                <a href="#" class="mr-2"><iconify-icon icon="ic:baseline-whatsapp"></iconify-icon></i></a>
             </ul>
          </div>
          <div class="col-md-6 d-flex">
             <p>The Hive Co Working and Business Center<br>Industiral Area Phase-2, Chandigarh</p>
          </div>
          <div class="col-md-3 d-flex flex-column align-items-end">
          </div>
       </div>
    </div>
    <div class="container mt-5">
       <div class="row d-flex justify-content-between">
          <div class="col-md-5">
             <h3>If you didn't find the products you are interested in or have questions?</h3>
          </div>
          <div class="col-md-6">
             <p>Enter your email:</p>
             <div class="input-group mb-3">
                <input type="email" class="form-control" placeholder="Your email here" aria-label="Your email" aria-describedby="basic-addon2" style="background-color: #000;">
                <button class="btn btn-outline-secondary" type="button" id="basic-addon2">
                <iconify-icon icon="ei:arrow-right"></iconify-icon>
                </button>
             </div>
          </div>
       </div>
    </div>
    <p class="pl-3">2023 - Copyright, All Rights Reserved.</p>
 </footer>

    <script>
        document.querySelector(`.addCartButton`).addEventListener('click', async () => {
            event.preventDefault();
            try {
                const Id = '<%= item.itemId %>';
                const response = await axios.post('/addItem', { itemId: Id});
                if (response.status === 200) {
                  console.log(response.data.message);
                      showAlert('item added to cart','success')
                      openCart()
                      let container = document.querySelector('.quantity-container')
                      container.style.display = 'block'
                      let value = document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value;
                      value = parseInt(value, 10);  // Parse the value as an integer
                      value = value + 1;
                      document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = value;
                } else {
                    console.error('Error adding item to cart:', response.data.message);

                }
            } catch (err) {
              window.location.href = "/login"
            }
        });
        document.addEventListener('DOMContentLoaded', async () => {
          const response = await axios.get('/getprofile');
          const userProfile = response.data.userProfile;
          const itemId = '<%= item.itemId %>';
          const cartItem = userProfile.cart.find(item => item.itemId === itemId);
          if (cartItem) {
            document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = cartItem.quantity
            document.querySelector('.quantity-container').style.display = 'block'
          } 
          document.querySelector(`.decrease<%= item.itemId %>desc`).addEventListener('click', async () => {
              await axios.post('/decreaseItem', { itemId: '<%= item.itemId %>' })
              .then(response => {
                  quantity = response.data.newQuantity;
                  if (quantity === -1){
                    document.querySelector('.quantity-container').style.display = 'none'
                      showAlert("Item removed from cart","success")
                  } else {
                      document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = quantity;
                      showAlert("Item quantity decreased","success")
                  }
              })
              .catch(err => alert("error " + err))
          })
          document.querySelector('.increase<%= item.itemId %>desc').addEventListener('click', async () => {
              console.log("triggered")
              await axios.post('/increaseItem', { itemId: '<%= item.itemId %>' })
              .then(response => {
                console.log('quantity increased')
                  document.querySelector(`.itemQuantity<%= item.itemId %>desc`).value = response.data.newQuantity;
                  showAlert("Item quantity increased","success")
              })
              .catch(err => alert("error " + err))
          })
        });

    </script>

<script>
  let products = [];

  document.addEventListener('DOMContentLoaded', async () => {
    try {
        const response = await fetchProducts('/api/products');
        products = response;
        renderProducts('all');
    } catch (error) {
        showAlert("error while fetching the products","danger")
    }
  });

  async function fetchProducts(apiEndpoint) {
    const response = await axios.get(apiEndpoint);
    return response.data;
  }

  function attachAddToCartListeners(products) {
    products.forEach(product => {
          const addButton = document.querySelector(`.add${product.itemId}`);
          addButton.addEventListener('click', async (event) => {
              event.preventDefault();
              try {
                const response = await addToCart('/addItem', { itemId: product.itemId });
                if (response.status === 200) {
                      console.log(response.data.message);
                      showAlert('item added to cart','success')
                      openCart()
                      // Optionally, update the UI to reflect the item being added to the cart
                } else {
                      console.error('Error adding item to cart:', response.data.message);
                      // Optionally, handle the error and update the UI accordingly
                }
              } catch (err) {
                if (err.response.status === 400){
                    showAlert("Item already in cart","success")
                    openCart()
                } else {
                    window.location.href = "/login"
                }
              }
          });
    });
  }
  async function addToCart(apiEndpoint, data) {
    return await axios.post(apiEndpoint, data);
  }

  function renderProducts(categoryFilter) {
    const productGrid = document.getElementById('productGrid');
    productGrid.innerHTML = '';

    const filteredProducts = categoryFilter === 'all' ? products : products.filter(product => product.category === categoryFilter);

    filteredProducts.forEach(product => {
          const productCard = createProductCard(product);
          productGrid.appendChild(productCard);
    });
    var descriptionElement = document.querySelectorAll(".productDescription");
    attachAddToCartListeners(filteredProducts);
  }
  function createProductCard(product) {
  const productCard = document.createElement('div');
  productCard.className = 'col-md-4 product-card product';

  var words = product.description.split(" ");
  product.description = words.slice(0, 10).join(" ");
  if (words.length > 10) {
      product.description += " ...";
  }

  words = product.name.split(" ");
  product.name = words.slice(0, 10).join(" ");
  if (words.length > 10) {
      product.name += " ...";
  }
  productCard.innerHTML = `
  <a href="/search/${product.itemId}" >
    <div class="product-image-container">
          <img class="product-image" src="${product.imageLink[0]}" alt="${product.name}">
          <img class="product-image hover-image" src="${product.imageLink[1] || product.imageLink[0]}" alt="${product.name}" style="display:none">
    </div>
    <div class="product-details">
          <div class="category-badge text-white corner-round p-1" style="display:none;">${product.category}</div>
          <div class="product-title"><a href="Product_Description.html" style="text-decoration:none;color:#000">${product.name}</a></div>
          <div class="product-description">${product.description}</div>
          <div class="mb-1">
              <div class="d-flex justify-content-between product-price-discount">
                <div class="product-price">&#8377; ${product.offeredPrice}</div>
                <div class="original-price text-secondary text-decoration-line-through">&#8377;${product.originalPrice || ''}</div>
                <div class="product-discount text-success">${((product.originalPrice - product.offeredPrice) / product.originalPrice * 100).toFixed(0)}% Off</div>
              </div>
          </div>
          <button onclick="showNotification()" class="add-to-cart-btn add${product.itemId}" id="liveToastBtn"><i class="fas fa-cart"></i> Add to Cart</button>
    </div>
  </a>
  `;

  const productImageContainer = productCard.querySelector('.product-image-container');
  const mainImage = productImageContainer.querySelector('.product-image');
  const hoverImage = productImageContainer.querySelector('.hover-image');

  productImageContainer.addEventListener('mouseenter', function () {
    mainImage.style.display = 'none';
    hoverImage.style.display = 'block';
  });

  productImageContainer.addEventListener('mouseleave', function () {
    mainImage.style.display = 'block';
    hoverImage.style.display = 'none';
  });



  return productCard;
  }

  // Example usage
  const container = document.getElementById('productContainer'); // Replace with the actual container element ID
  products.forEach(product => {
  const productCard = createProductCard(product);
  container.appendChild(productCard);
  });
</script>

<script>
    function toggleFAQ(question) {
        const isActive = question.classList.contains('active');
        const faqQuestions = document.querySelectorAll('.faq-question');

        faqQuestions.forEach((faqQuestion) => {
            faqQuestion.classList.remove('active');
            const answer = faqQuestion.nextElementSibling;
            answer.style.maxHeight = '0';
            const icon = faqQuestion.querySelector('.icon');
            icon.innerHTML = '+';
        });

        if (!isActive) {
            question.classList.add('active');
            const answer = question.nextElementSibling;
            answer.style.maxHeight = answer.scrollHeight + 'px';
            const icon = question.querySelector('.icon');
            icon.innerHTML = '❌';
        }
    }
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
      var mainImageContainer = document.getElementById('mainImageContainer');
      var mainProductImage = document.getElementById('mainProductImage');

      // Wait for the image to load
      mainProductImage.onload = function () {
          // Create a canvas element
          var canvas = document.createElement('canvas');
          var context = canvas.getContext('2d');

          // Set the canvas dimensions to match the image
          canvas.width = mainProductImage.width;
          canvas.height = mainProductImage.height;

          // Draw the image onto the canvas
          context.drawImage(mainProductImage, 0, 0, mainProductImage.width, mainProductImage.height);

          // Get the average color of the image
          var imageData = context.getImageData(0, 0, mainProductImage.width, mainProductImage.height).data;
          var totalPixels = mainProductImage.width * mainProductImage.height;
          var sumRed = 0, sumGreen = 0, sumBlue = 0;

          for (var i = 0; i < totalPixels; i++) {
              sumRed += imageData[i * 4];
              sumGreen += imageData[i * 4 + 1];
              sumBlue += imageData[i * 4 + 2];
          }

          var averageColor = {
              red: Math.round(sumRed / totalPixels),
              green: Math.round(sumGreen / totalPixels),
              blue: Math.round(sumBlue / totalPixels),
          };

          // Set the background color of the container
          mainImageContainer.style.backgroundColor = 'rgb(' + averageColor.red + ',' + averageColor.green + ',' + averageColor.blue + ')';
      };
  });
</script>


</body>
</html>