<div id="cartSidebar"  class="text-white" style="padding: 2rem;position: fixed; top: 0; right: -400px; height: 100vh; width: 400px; transition: right 0.3s ease-in-out;background-color: #222;z-index: 3;">
    <button type="button" class="close ml-3 mt-2" aria-label="Close" onclick="closeCart()" style="color:#fff;font-size:2vh;background-color: #222;border: none;">
        <span aria-hidden="true" style="font-size: 2vh;">&#10060; Close</span>
    </button>
    <h4 class="mt-3 mb-3">Your Cart</h4>
    <ul class="list-group mb-3" id="cartItemsContainer" style="color: #000;">
        <li class="list-group-item d-flex justify-content-between">
            <span>Cart is Empty.</span>
            <strong>Add Some Products</strong>
        </li>
    </ul>
    <button class="btn btn-light btn-lg btn-block" onclick="proceedToCheckOut()">Proceed to Checkout</button>
</div>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    async function proceedToCheckOut () {
        await axios.get('/confirm')
        .then(response => {
            window.location.href = '/confirm';
        })
        .catch(err => {
            if (err.response.status === 502){
                showAlert("Please add items to cart","danger")
            } else {
                window.location.href = "/login"
            }
        })
    }
    // Function to add items to the cart
    async function openCart() {
        document.getElementById('cartSidebar').style.right = '0';
        try {
            // Fetch user profile
            const response = await axios.get('/getprofile');
            const userProfile = response.data.userProfile;

            if (userProfile.cart.length === 0){
                return 0;
            }

            // Render cart items
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            cartItemsContainer.innerHTML = ''; // Clear existing content

            
            userProfile.cart.forEach(async cartItem => {
                await axios.get(`/api/products/${cartItem.itemId}`)
                    .then(response => response.data)
                    .then(productDetails => {
                        const cartItemElement = document.createElement('div');
                        cartItemElement.className = `row main align-items-center card_${cartItem.itemId}`;

                        cartItemElement.innerHTML = `
                        <li class="list-group-item d-flex flex-column  mb-3 justify-content-between">
                            <div class="d-flex justify-content-between p-1  align-items-center" style="width:100%;padding:0;">
                                <div class="d-flex justify-content-center align-content-center" style="width:10%;height:auto;"><img class="img-fluid" src="${productDetails.imageLink[0]}" style="height:10vh;width:auto;" ></div>
                                <div style="width:50%;display:flex;flex-wrap:wrap;">
                                    <div class="row text-muted" style="display:none;">${productDetails.category}</div>
                                    <div class="row" style="text-transform:capitalize;text-align:left;margin-left:1vh;">${productDetails.name}</div>
                                </div>
                                <div style="width:30%">
                                    <a href="#" class="decrease${cartItem.itemId}">-</a>
                                    <a href="#" class="border p-2 m-2 itemQuantity${cartItem.itemId}">
                                        ${cartItem.quantity}
                                    </a>
                                    <a href="#" class="increase${cartItem.itemId}">+</a>
                                </div>
                            </div>
                            <div class="mb-2 mt-2 single_item_total${cartItem.itemId}" style="font-size:1.3rem;font-weight:bolder;">&#8377;${(productDetails.offeredPrice * cartItem.quantity)}</div>
                            <button class="btn btn-warning deleteButton${cartItem.itemId}">Delete</button>
                        </li>
                        `;
                        cartItemsContainer.append(cartItemElement);

                        document.querySelector(`.decrease${cartItem.itemId}`).addEventListener('click', async () => {
                            await axios.post('/decreaseItem', { itemId: cartItem.itemId })
                            .then(response => {
                                quantity = response.data.newQuantity;
                                if (quantity === -1){
                                    document.querySelector(`.card_${cartItem.itemId}`).innerHTML = "";
                                    showAlert("Item removed from cart","success")
                                } else {
                                    document.querySelector(`.itemQuantity${cartItem.itemId}`).textContent = quantity;
                                    document.querySelector(`.single_item_total${cartItem.itemId}`).textContent = response.data.newQuantity*productDetails.offeredPrice;
                                    showAlert("Item quantity decreased","success")
                                }
                            })
                            .catch(err => alert("error " + err))
                        })
                        document.querySelector(`.increase${cartItem.itemId}`).addEventListener('click', async () => {
                            await axios.post('/increaseItem', { itemId: cartItem.itemId })
                            .then(response => {
                                document.querySelector(`.itemQuantity${cartItem.itemId}`).textContent = response.data.newQuantity;
                                document.querySelector(`.single_item_total${cartItem.itemId}`).textContent = response.data.newQuantity*productDetails.offeredPrice;
                                showAlert("Item quantity increased","success")
                            })
                            .catch(err => alert("error " + err))
                        })
                        document.querySelector(`.deleteButton${cartItem.itemId}`).addEventListener('click', async () => {
                            await axios.post('/removeItem', { itemId: cartItem.itemId })
                            .then(response => {
                                quantity = response.data.newQuantity;
                                if (quantity === -1){
                                    document.querySelector(`.card_${cartItem.itemId}`).innerHTML = "";
                                    showAlert("Item removed from cart","success")
                                }
                            })
                            .catch(err => alert("error " + err))
                        })
                    })
                    .catch(err => console.log("an error occurred fetching the items " + err))
            });
        } catch (error) {
            console.log("Error fetching profile: ", error);
        }
    }

    // Function to close the cart
    function closeCart() {
        document.getElementById('cartSidebar').style.right = '-400px'; 
    }

    function calculateCartItemTotal(cartItem) {
        // Assuming each cart item has a field named 'price'
        return cartItem.price * cartItem.quantity;
    }
</script>